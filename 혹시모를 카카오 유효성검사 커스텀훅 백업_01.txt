엑세스 토큰을 한글로 바꿨을때 (영어일떄는 1번오류가 잘 호출됨) API가 여러번(6번인가 8번) 호출되지만
정상 실행되던 아래 코드

import { gql, useMutation } from '@apollo/client';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { useRecoilState } from 'recoil';
import { isUserSignedInState } from '../../../../commons/globalState/index';

// 카카오 엑세스 토큰 유효성 검사 API
const KAKAO_TOKEN_CHECK = gql`
  mutation kakaoTokenCheck($accessToken: String!) {
    kakaoTokenCheck(accessToken: $accessToken) {
      isValid
      userId
      expiresIn
      error
    }
  }
`;

export default function useTokenValidityCheck() {
  const [kakaoTokenCheck] = useMutation(KAKAO_TOKEN_CHECK);
  const [, setIsUserSignedIn] = useRecoilState(isUserSignedInState);
  const [isCheckingToken, setIsCheckingToken] = useState(false);
  const [retryCount, setRetryCount] = useState(0);
  const MAX_RETRIES = 2; // 최대 재시도 횟수 설정
  const router = useRouter();

  useEffect(() => {
    const TokenValidityCheck = async () => {
      if (typeof window !== 'undefined') {
        const accessToken = localStorage.getItem('accessToken');

        // 이미 토큰을 확인 중이라면 중복 검사를 막음
        if (isCheckingToken || !accessToken) return;

        setIsCheckingToken(true);

        // Access Token 유효성 검사
        try {
          const response = await kakaoTokenCheck({
            variables: { accessToken },
          });

          const tokenCheckResult = response.data.kakaoTokenCheck;

          if (tokenCheckResult.isValid) {
            // 토큰이 유효하면 로그인 상태 유지 및 재시도 횟수 초기화
            setIsUserSignedIn(true);
            setRetryCount(0); // 재시도 횟수 초기화
          } else if (tokenCheckResult.error) {
            localStorage.removeItem('accessToken');
            localStorage.removeItem('userData');
            localStorage.setItem('1번 오류(정상오류)', '1');
            setIsUserSignedIn(false);
          }
        } catch (error) {
          localStorage.setItem(
            '네트워크 오류 발생',
            '네트워크 오류가 발생했습니다',
          );

          if (error.networkError || error.graphQLErrors) {
            if (retryCount < MAX_RETRIES) {
              // 재시도 횟수 증가
              const newRetryCount = retryCount + 1; // 상태 바로 업데이트하지 않고 새 값으로 관리
              localStorage.setItem(
                `재시도 ${newRetryCount}회 발생 ${new Date().getSeconds()}`,
                `재시도 ${newRetryCount}회 발생`,
              );

              // 2초 후에 재시도
              setTimeout(() => {
                setRetryCount(newRetryCount); // 여기서만 상태 업데이트
              }, 2000); // 재시도 전에 2초 지연
            } else {
              // 재시도 횟수를 넘은 경우 토큰 삭제 및 로그아웃
              localStorage.setItem(
                `최대 재시도 횟수 초과 ${new Date().getSeconds()}`,
                '최대 재시도 횟수 초과: 토큰 제거 및 로그아웃',
              );
              localStorage.removeItem('accessToken');
              localStorage.removeItem('userData');
              setIsUserSignedIn(false);
              window.location.reload();
            }
          } else {
            localStorage.setItem('기타 오류', error);
            setIsUserSignedIn(false);
          }
        } finally {
          setIsCheckingToken(false); // 검증 완료 후 상태 해제
        }
      }
    };

    // retryCount가 변경될 때만 재시도를 트리거
    if (retryCount > 0) {
      TokenValidityCheck();
    }

    // 라우트 변경 완료 이벤트 감지
    router.events.on('routeChangeComplete', TokenValidityCheck);

    // 최초 실행
    TokenValidityCheck();

    // 컴포넌트 언마운트 시 이벤트 리스너 제거
    return () => {
      router.events.off('routeChangeComplete', TokenValidityCheck);
    };
  }, [retryCount, kakaoTokenCheck, setIsUserSignedIn, router.events]); // retryCount가 변경될 때 트리거

  return null;
}