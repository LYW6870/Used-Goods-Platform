20240911 시작시 gpt의 토큰유효성검사 코드 개선 전 정상작동코드 백업

import { gql, useMutation } from '@apollo/client';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { useRecoilState } from 'recoil';
import { isUserSignedInState } from '../../../../commons/globalState/index';

// 카카오 엑세스 토큰 유효성 검사 API
const KAKAO_TOKEN_CHECK = gql`
  mutation kakaoTokenCheck($accessToken: String!) {
    kakaoTokenCheck(accessToken: $accessToken) {
      isValid
      userId
      expiresIn
      error
    }
  }
`;

export default function useTokenValidityCheck() {
  const [kakaoTokenCheck] = useMutation(KAKAO_TOKEN_CHECK);
  const [, setIsUserSignedIn] = useRecoilState(isUserSignedInState);
  const [isCheckingToken, setIsCheckingToken] = useState(false);
  const [retryCount, setRetryCount] = useState(0); // 일시적인 네크워크 오류시 재시도 카운트
  const MAX_RETRIES = 2; // 최대 재시도 횟수 설정
  const router = useRouter();

  useEffect(() => {
    const handleRetry = () => {
      if (retryCount < MAX_RETRIES) {
        const newRetryCount = retryCount + 1;
        localStorage.setItem(
          `재시도 ${newRetryCount}회 발생 ${new Date().getSeconds()}`,
          `재시도 ${newRetryCount}회 발생`,
        );

        // 상태 업데이트 후 재시도
        setRetryCount(newRetryCount);
      } else {
        // 최대 재시도 횟수를 넘은 경우 토큰 삭제 및 로그아웃
        localStorage.setItem(
          `최대 재시도 횟수 초과 ${new Date().getSeconds()}`,
          '최대 재시도 횟수 초과: 토큰 제거 및 로그아웃',
        );
        localStorage.removeItem('accessToken');
        localStorage.removeItem('userData');
        setIsUserSignedIn(false);
        window.location.reload();
      }
    };

    const TokenValidityCheck = async () => {
      if (typeof window !== 'undefined') {
        const accessToken = localStorage.getItem('accessToken');

        // 이미 토큰을 확인 중이거나 중복 호출을 방지
        if (isCheckingToken || !accessToken) return;

        setIsCheckingToken(true);

        // 첫 번째 시도에서만 API 호출
        if (retryCount === 0) {
          try {
            const response = await kakaoTokenCheck({
              variables: { accessToken },
            });

            const tokenCheckResult = response.data.kakaoTokenCheck;

            if (tokenCheckResult.isValid) {
              // 토큰이 유효하면 로그인 상태 유지 및 재시도 횟수 초기화
              setIsUserSignedIn(true);
              setRetryCount(0); // 재시도 횟수 초기화
            } else if (tokenCheckResult.error) {
              localStorage.removeItem('accessToken');
              localStorage.removeItem('userData');
              localStorage.setItem('1번 오류(정상오류)', '1');
              setIsUserSignedIn(false);
              window.location.reload();
            }
          } catch (error) {
            localStorage.setItem(
              '네트워크 오류 발생',
              '네트워크 오류가 발생했습니다',
            );

            if (error.networkError || error.graphQLErrors) {
              // 재시도 로직 제어: retryCount에 따라 동작
              handleRetry();
            } else {
              localStorage.setItem('기타 오류', error);
              setIsUserSignedIn(false);
            }
          } finally {
            setIsCheckingToken(false); // 검증 완료 후 상태 해제
          }
        }
      }
    };

    // retryCount가 0일 때 최초 API 호출, 이후에는 재시도만 실행
    if (retryCount === 0) {
      TokenValidityCheck(); // 최초 실행 시 호출
    }

    if (retryCount > 0 && retryCount <= MAX_RETRIES) {
      // 재시도 로직 (API 호출하지 않고 상태만 업데이트)
      setTimeout(() => {
        handleRetry();
      }, 200); // 0.2초 지연 후 재시도 호출
    }

    // 라우트 변경 완료 이벤트 감지
    router.events.on('routeChangeComplete', TokenValidityCheck);

    // 컴포넌트 언마운트 시 이벤트 리스너 제거
    return () => {
      router.events.off('routeChangeComplete', TokenValidityCheck);
    };
  }, [retryCount, kakaoTokenCheck, setIsUserSignedIn, router.events]);

  return null;
}
